import React, { useEffect, useState } from "react";
import jsPDF from "jspdf";
import { applyPlugin } from "jspdf-autotable";
import AdminNavBar from "../../CustomerServiceManagement/Admin/AdminNavBar";
applyPlugin(jsPDF);

function AllFarmers() {
  const [users, setUsers] = useState([]);
  const [searchTerm, setSearchTerm] = useState("");
  const [filteredUsers, setFilteredUsers] = useState([]);

  useEffect(() => {
    const fetchUsers = async () => {
      try {
        const response = await fetch("http://localhost:8085/user");
        const data = await response.json();
        if (response.ok) {
          setUsers(data.user);
          setFilteredUsers(data.user);
        } else {
          alert(data.message || "Failed to fetch users");
        }
      } catch (error) {
        console.error("Error fetching users:", error);
        alert("An error occurred while fetching users");
      }
    };

    fetchUsers();
  }, []);

  useEffect(() => {
    const results = users.filter(
      (user) =>
        user.fullName.toLowerCase().includes(searchTerm.toLowerCase()) ||
        user.email.toLowerCase().includes(searchTerm.toLowerCase()) ||
        user.phone.toLowerCase().includes(searchTerm.toLowerCase()) ||
        user.address.toLowerCase().includes(searchTerm.toLowerCase())
    );
    setFilteredUsers(results);
  }, [searchTerm, users]);

  const handleDelete = async (userId) => {
    const isConfirmed = window.confirm(
      "Are you sure you want to delete this user?"
    );
    if (isConfirmed) {
      try {
        const response = await fetch(`http://localhost:8085/user/${userId}`, {
          method: "DELETE",
        });
        const data = await response.json();
        if (response.ok) {
          alert("User deleted successfully");
          setUsers(users.filter((user) => user._id !== userId));
          setFilteredUsers(filteredUsers.filter((user) => user._id !== userId));
        } else {
          alert(data.message || "Failed to delete user");
        }
      } catch (error) {
        console.error("Error deleting user:", error);
        alert("An error occurred while deleting user");
      }
    }
  };

  const handleUpdate = (userId) => {
    window.location.href = `/updateFarmer/${userId}`;
  };

  const generatePDF = () => {
    const doc = new jsPDF({
      orientation: "portrait",
      unit: "mm",
      format: "a4"
    });

    // Add logo (you'll need to replace this with your actual logo)
    // Note: For production, you should convert your logo to base64 or host it
    const logoUrl = "https://via.placeholder.com/150x50?text=Farm+Logo";
    doc.addImage(logoUrl, "JPEG", 15, 10, 40, 15);

    // Report title
    doc.setFontSize(20);
    doc.setTextColor(40, 40, 40);
    doc.setFont("helvetica", "bold");
    doc.text("Farmers Management Report", 105, 20, { align: "center" });

    // Report subtitle
    doc.setFontSize(12);
    doc.setTextColor(100, 100, 100);
    doc.setFont("helvetica", "normal");
    doc.text("Generated on: " + new Date().toLocaleDateString(), 105, 28, { align: "center" });

    // Summary information
    doc.setFontSize(10);
    doc.text(`Total Farmers: ${filteredUsers.length}`, 15, 40);
    doc.text(`Report generated by: Admin`, 15, 45);

    // Table styling
    const tableColumn = ["Full Name", "Email", "Phone", "Address", "Status"];
    const tableRows = [];

    filteredUsers.forEach(user => {
      const userData = [
        user.fullName,
        user.email,
        user.phone,
        user.address,
        "Active" // You can replace this with actual status if available
      ];
      tableRows.push(userData);
    });

    // Add table
    doc.autoTable({
      head: [tableColumn],
      body: tableRows,
      startY: 55,
      theme: "grid",
      headStyles: {
        fillColor: [34, 139, 34], // Forest green color for header
        textColor: [255, 255, 255],
        fontStyle: "bold"
      },
      alternateRowStyles: {
        fillColor: [245, 245, 245]
      },
      margin: { top: 55 },
      styles: {
        cellPadding: 3,
        fontSize: 9,
        valign: "middle"
      },
      columnStyles: {
        0: { cellWidth: 30 },
        1: { cellWidth: 45 },
        2: { cellWidth: 30 },
        3: { cellWidth: 50 },
        4: { cellWidth: 20 }
      }
    });

    // Footer
    const pageCount = doc.internal.getNumberOfPages();
    for (let i = 1; i <= pageCount; i++) {
      doc.setPage(i);
      doc.setFontSize(8);
      doc.setTextColor(150);
      doc.text(
        `Page ${i} of ${pageCount}`,
        105,
        287,
        { align: "center" }
      );
      doc.text(
        "Â© 2023 Farmers Management System. All rights reserved.",
        105,
        292,
        { align: "center" }
      );
    }

    // Save the PDF
    doc.save(`Farmers_Report_${new Date().toISOString().slice(0, 10)}.pdf`);
  };

  return (
    <div>
      <AdminNavBar/>
      <div className="page_with_set">
        <p className="topic_from">
          All Farmers <span className="dot">.</span>
        </p>
        <div className="admin_action_continer">
          <button
            className="pdf_btn"
            onClick={() => (window.location.href = "/addFarmer")}
          >
            Add Farmer
          </button>
          <input
            className="search_bar"
            type="text"
            placeholder="Search by name, email, phone, or address"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
          <button className="pdf_btn" onClick={generatePDF}>
            Generate PDF Report
          </button>
        </div>
        <table border="1" style={{ width: "100%", borderCollapse: "collapse" }}>
          <thead>
            <tr>
              <th>Full Name</th>
              <th>Email</th>
              <th>Phone</th>
              <th>Address</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            {filteredUsers.map((user) => (
              <tr key={user._id}>
                <td>{user.fullName}</td>
                <td>{user.email}</td>
                <td>{user.phone}</td>
                <td>{user.address}</td>
                <td className="btn_td_new">
                  <button
                    className="btn_action"
                    onClick={() => handleUpdate(user._id)}
                  >
                    Update
                  </button>
                  <button
                    className="deletbtn"
                    onClick={() => handleDelete(user._id)}
                  >
                    Delete
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
}

export default AllFarmers;